FROM kalilinux/kali-rolling:latest
# Properties
LABEL org.opencontainers.image.authors="dominique.righetto@gmail.com"
LABEL org.opencontainers.image.vendor="Dominique RIGHETTO (righettod)"
LABEL org.opencontainers.image.url="https://github.com/righettod/toolbox-pentest-web"
LABEL org.opencontainers.image.source="https://github.com/righettod/toolbox-pentest-web"
LABEL org.opencontainers.image.documentation="https://github.com/righettod/toolbox-pentest-web"
LABEL org.opencontainers.image.licenses="GPL-3.0-only"
LABEL org.opencontainers.image.title="toolbox-pentest-web"
LABEL org.opencontainers.image.description="Web Application Pentest customized toolbox based on a KALI image"
LABEL org.opencontainers.image.base.name="righettod/toolbox-pentest-web:latest"
# Install system packages
## Always needed
ENV DEBIAN_FRONTEND noninteractive
RUN apt -y update
RUN apt install -y aha ascii autoconf automake bsdmainutils build-essential cewl curl dos2unix dnsutils ftp-ssl git golang-go grc highlight hydra iproute2 iputils-ping john jc jq libauthen-pam-perl libcurl4 libcurl4-openssl-dev libffi-dev libgeoip-dev libgmp3-dev libimage-exiftool-perl libio-pty-perl libmpc-dev libnet-ssleay-perl libpcap-dev libsqlite3-dev libssl-dev libtool libxml2-utils libyaml-dev locales nano ncat net-tools nmap npm openjdk-11-jdk openssl pdfgrep perl python-is-python3 python3 python3-dev python3-gmpy2 python3-pip python3-pystache python3-venv python3-wheel python3-yaml rpcbind ruby ruby-dev sqlite3 ssh telnet tmux unicornscan unzip vim wafw00f wget whois wpscan zlib1g-dev zip zsh
## Install Rust compiler and Cargo package manager
RUN curl --output /tmp/rust.sh https://sh.rustup.rs -sSf
RUN chmod +x /tmp/rust.sh; sh /tmp/rust.sh -y
# Pretty shell
RUN sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
## Needed only for specific kind of assessments like internal network assessment
# RUN apt update install -y binwalk exploitdb exploitdb-bin-sploits ldap-utils metasploit-framework nfs-common smbclient smbmap
# Create the base folder of all tools
RUN mkdir /tools
# Install utility scripts
COPY scripts /tools/scripts
# Install utility templates
COPY templates /tools/templates
# Install static binaries folder
COPY static-binaries /tools/static-binaries
# Install docs folder
COPY docs /tools/docs
# Install misc folder
COPY misc /tools/misc
# Install dictionaries
COPY dictionaries /tools/dictionaries
# Install tools and extra materials
COPY build /tmp/build
RUN for f in $(ls /tmp/build/add_*.sh); do chmod +x $f;bash $f; done
# Set execute access right
RUN chmod -R +x /tools/
# Set final settings of the toolbox
RUN date > /root/image-build-datetime
RUN echo "export PATH=$PATH:/tools/scripts:/root/go/bin:/root/.cargo/bin" >> /root/.zshrc
RUN echo "export NUCLEI_TPL_HOME=/root/nuclei-templates" >> /root/.zshrc
RUN echo "export NUCLEI_FUZZING_TPL_HOME=/tools/nuclei-fuzzing-templates" >> /root/.zshrc
RUN echo "export JWTTOOL_CONFIG_HOME=/root/.jwt_tool" >> /root/.zshrc
RUN echo "alias list-http-scripts-nmap='ls /usr/share/nmap/scripts/http-*'" >> /root/.zshrc
RUN echo "alias list-python-packages='python -m pip list'" >> /root/.zshrc
RUN echo "alias check-tls='bash /tools/testssl/testssl.sh -s -p -U --quiet '" >> /root/.zshrc
RUN echo "alias cat-colorized='highlight -O ansi --force'" >> /root/.zshrc
RUN echo "alias cat-colorized-extended='bat '" >> /root/.zshrc
RUN echo "alias dig-formatted='dig +multiline +noall +answer +nocmd '" >> /root/.zshrc
RUN echo "alias nmap-colorized='grc nmap '" >> /root/.zshrc
RUN echo "alias default-creds-search='creds search '" >> /root/.zshrc
RUN echo "alias load-python-env='source /root/python-env/bin/activate'" >> /root/.zshrc
RUN echo "alias load-zsh-theme='(){ export ZSH_THEME=\"$@\" && source $ZSH/oh-my-zsh.sh }'" >> /root/.zshrc
RUN echo "alias sqlmap='python /tools/sqlmap/sqlmap.py --tamper=space2comment --time-sec 30 --ignore-redirects -r '" >> /root/.zshrc
RUN echo "source /root/python-env/bin/activate" >> /root/.zshrc
RUN echo "source /root/python-env/bin/activate" >> /root/.bashrc
RUN touch /root/.hushlogin
# Setup SSH server for remove access
RUN echo "...:::TOOLBOX:::..." > /etc/motd
RUN rm -rf /etc/ssh/ssh_host_*
RUN dpkg-reconfigure openssh-server
COPY ssh-public-key.pem /root/.ssh/ 
RUN mv /root/.ssh/ssh-public-key.pem /root/.ssh/authorized_keys
RUN chmod -R 700 /root/.ssh;mkdir -p /run/sshd;sshd -t
# Final cleanup and tunning
RUN mkdir -p /root/.config/ookla
COPY speedtest-cli.json /root/.config/ookla/
RUN chmod +x /tmp/build/remove_build_cache.sh; bash /tmp/build/remove_build_cache.sh
RUN rm -rf /tmp/*
WORKDIR /tools
VOLUME /tools/reports
EXPOSE 80
EXPOSE 443
EXPOSE 22
CMD ["/usr/sbin/sshd","-e","-D"]
