#!/usr/bin/env python
import json
import argparse
from termcolor import colored
from tabulate import tabulate

"""
Script to extract the information, about the Attack Surface identified,
from the JSON output of a NUCLEI scan.

Sources:
    https://github.com/projectdiscovery/nuclei

Dependencies:
    pip install tabulate colorama termcolor
"""


def load_findings(nuclei_file):
    with open(nuclei_file, mode="r", encoding="latin") as f:
        findings = json.loads(f.read())
    return findings


def summarize_attack_surface(findings):
    affected = []
    metrics = {}
    for finding in findings:
        tpl_id = finding["template-id"]
        as_type = None
        if tpl_id.endswith("-login") or tpl_id.endswith("-logon") or tpl_id.endswith("-panel") or tpl_id in ["basic-auth-detect"]:
            as_type = "Login panel/interface"
        elif tpl_id.endswith("-upload-form"):
            as_type = "Upload form"
        elif tpl_id.endswith("-bucket-service") or tpl_id in ["s3-detect"]:
            as_type = "Cloud bucket storage"
        elif tpl_id in ["default-windows-server-page", "owncloud-status-page"]:
            as_type = "Default installation setup"
        elif tpl_id.split("-")[-1] in ["docs", "listing", "printenv", "stacktraces", "serverinfo", "config"]:
            as_type = "Technical information disclosure"
        elif tpl_id in ["graphql-detect", "springboot-actuator", "spring-detect"]:
            as_type = "Web API available"
        if as_type is not None:
            if as_type not in metrics:
                metrics[as_type] = 0
            metrics[as_type] = metrics[as_type] + 1
    for key in metrics:
        affected.append({"Vector type": key.capitalize(), "Occurence": metrics[key]})
    return affected


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Script to extract the information, about the Attack Surface identified, from the JSON output of a NUCLEI scan.")
    parser.add_argument("-f", action="store", dest="nuclei_file", help="JSON file coming from the NUCLEI scan", required=True)
    args = parser.parse_args()
    nuclei_file = args.nuclei_file
    findings = load_findings(args.nuclei_file)
    print(colored(f"[+] Attack Surface identified based on findings from the '{nuclei_file}' file:", "yellow"))
    affected = summarize_attack_surface(findings)
    print(tabulate(affected, headers="keys"))
