#!/bin/bash
#############################################################################################
# Script to find, as much as possible, Cloud based services (AWS/AZURE/GCP) 
# used by a company based on its main web domain, as input information.
#
# Based on the following project for AZURE information:
# 	https://github.com/NetSPI/MicroBurst/blob/master/Misc/Invoke-EnumerateAzureSubDomains.ps
# Requirements in terms of software:
# 	https://github.com/projectdiscovery/httpx
# 	apt install wget curl jq dnsutils whois
# 
# Note:
#	System command was used, for DNS related work, because it was more reliable than dnsx
#	when the container was used within the context of an VPN connection on the docker host.
#############################################################################################

# Constants
INIT_MARKER_FILE="/tmp/$(basename $0).init"
PERMUTATIONS_FILE="/tmp/permutations.txt"
CRTSH_DATA_FILE="/tmp/crtshdata.json"
WORK_FILE="/tmp/work.txt"
THREAD_COUNT=10
GO_BIN_HOME="/root/go/bin"
EDGE_HOME="/tools/edge"
AZURE_SUBDOMAINS=("onmicrosoft.com" "scm.azurewebsites.net" "azurewebsites.net" "p.azurewebsites.net" "cloudapp.net" "file.core.windows.net" "blob.core.windows.net" "queue.core.windows.net" "table.core.windows.net" "mail.protection.outlook.com" "sharepoint.com" "redis.cache.windows.net" "documents.azure.com" "database.windows.net" "vault.azure.net" "azureedge.net" "search.windows.net" "azure-api.net" "azurecr.io")
EXTRA_PROVIDERS_SUBDOMAINS=("service-now.com")
PROVIDERS_SUBDOMAINS=("${AZURE_SUBDOMAINS[@]}" "${EXTRA_PROVIDERS_SUBDOMAINS[@]}")

# Entry point
if [ "$#" -lt 1 ]; then
    script_name=$(basename "$0")
    echo "Usage:"
    echo "   $script_name [COMPANY_BASE_DOMAIN]"
    echo ""
    echo "Call example:"
    echo "    $script_name righettod.eu"
    exit 1
fi

# Utility functions
function write_step(){
    echo -e "\e[93m[+] $1\e[0m"
}

function process_subdomain(){
	subdomain=$1
	for ipv4 in $(dig +time=2 +tries=2 +retry=1 +short A $subdomain)
	do
		is_ipv4=$(echo "$ipv4" | grep -Ec "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$")
		if [ $is_ipv4 -ne 1 ]
		then
			continue
		fi
		whois_record=$(whois $ipv4 2>/dev/null)
		is_azure=$(echo "$whois_record" | grep -iFc "MICROSOFT")
		is_aws=$(echo "$whois_record" | grep -iFc "AMAZON")
		is_gcp=$(echo "$whois_record" | grep -iFc "GOOGLE")
		provider="NONE"
		if [ $is_azure -gt 0 ]
		then
			provider="AZURE"
		elif [ $is_aws -gt 0 ]
		then
			provider="AWS"
		elif [ $is_gcp -gt 0 ]
		then
			provider="GCP"			
		fi
		if [ "$provider" != "NONE" ]
		then
			echo "$subdomain ($ipv4) use $provider services."
		fi		
	done	
}


# Working context
BASE_DOMAIN="$1"
BASE=$(echo $BASE_DOMAIN | cut -d'.' -f1)

write_step "Download cloud providers and sub domains data..."
if [ ! -f $INIT_MARKER_FILE ]
then 
	curl -sk https://raw.githubusercontent.com/NetSPI/MicroBurst/master/Misc/permutations.txt | sed 's/\$//g' > $PERMUTATIONS_FILE
	curl -sk --output $CRTSH_DATA_FILE "https://crt.sh/?q=%25.$BASE_DOMAIN&output=json"
	curl -sk https://azureipranges.azurewebsites.net/Home/Update > /dev/null
	wget -q -O $EDGE_HOME/ip-ranges.json https://ip-ranges.amazonaws.com/ip-ranges.json
	wget -q -O $EDGE_HOME/goog.json https://www.gstatic.com/ipranges/goog.json
	wget -q -O $EDGE_HOME/azure.json https://azureipranges.azurewebsites.net/Data/Public.json
	echo "X" > $INIT_MARKER_FILE
	echo "Done."
else
	echo "Already performed."
fi
ls -l $PERMUTATIONS_FILE $CRTSH_DATA_FILE $EDGE_HOME/*.json
write_step "AZURE and other services via DNS discovery..."
for sub_domain in "${PROVIDERS_SUBDOMAINS[@]}"
do
	# Direct case
	subdomain="$BASE.$sub_domain"
	process_subdomain $subdomain
	while IFS= read -r word
	do
		# Prefix case
		subdomain="$word$BASE.$sub_domain"
		process_subdomain $subdomain
		# Suffix case	
		subdomain="$BASE$word.$sub_domain"
		process_subdomain $subdomain		
	done < "$PERMUTATIONS_FILE"
done
write_step "AWS S3 buckets via HTTP discovery..."
aws_s3_domain="s3.amazonaws.com"
# Direct case
subdomain="$BASE.$aws_s3_domain"
echo $subdomain > $WORK_FILE
while IFS= read -r word
do
	# Prefix case
	subdomain="$word$BASE.$aws_s3_domain"
	echo $subdomain >> $WORK_FILE
	# Suffix case	
	subdomain="$BASE$word.$aws_s3_domain"
	echo $subdomain >> $WORK_FILE		
done < "$PERMUTATIONS_FILE"
#$GO_BIN_HOME/httpx -silent -fe "(NoSuchBucket|IllegalLocationConstraintException)" -title -t $THREAD_COUNT -rl $THREAD_COUNT -list $WORK_FILE
write_step "AZURE/AWS/GCP services via 'crt.sh' entries..."
cat $CRTSH_DATA_FILE | jq -r ".[].common_name" | sort -u | grep -iv "\.local$" | grep -Fv "*" > $WORK_FILE
while IFS= read -r subdomain
do
	process_subdomain $subdomain
done < "$WORK_FILE"
write_step "AZURE/AWS/GCP services via the 'EDGE' tools..."
cdir=$(pwd)
cd $EDGE_HOME
./edge -domain "$BASE_DOMAIN" -dns -crt -silent | grep -F "Provider:"
cd $cdir
write_step "Cleanup..."
rm $WORK_FILE
