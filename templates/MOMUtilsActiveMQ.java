import jakarta.jms.*;
import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.command.ActiveMQObjectMessage;
import org.apache.activemq.command.ActiveMQQueue;

import java.util.List;
import java.util.Set;

/**
 * Utility class to work with an ACTIVEMQ BROKER for manual inspection.
 * Require the ActiveMQ client library, see link to Maven "activemq-client" artifact to import it.
 *
 * @see "https://mvnrepository.com/artifact/org.apache.activemq/activemq-client"
 * @see "https://activemq.apache.org/using-activemq"
 * @see "https://activemq.apache.org/broker-uri"
 */
public class MOMUtilsActiveMQ {


    private static void subscribeToTopics(String brokerURL, List<String> topicNames) throws Exception {
        ActiveMQConnection connection = ActiveMQConnection.makeConnection(brokerURL);
        connection.start();
        ConnectionMetaData metaData = connection.getMetaData();
        System.out.printf("[+] %s %s\n", metaData.getJMSProviderName(), metaData.getProviderVersion());
        final TopicSession tSess = ((TopicConnection) connection).createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
        final String messageSelector = "";//Want all messages
        topicNames.forEach(t -> {
            try {
                tSess.createSubscriber(tSess.createTopic(t.trim()), messageSelector, false).setMessageListener(message -> {
                    ActiveMQObjectMessage msg = (ActiveMQObjectMessage) message;
                    System.out.printf("[<][%s] %s\n", msg.getDestination(), new String(msg.getContent().getData()));
                });
            } catch (JMSException e) {
                e.printStackTrace();
            }
        });
    }

    private static void listQueues(String brokerURL) throws Exception {
        ActiveMQConnection connection = ActiveMQConnection.makeConnection(brokerURL);
        connection.start();
        ConnectionMetaData metaData = connection.getMetaData();
        System.out.printf("[+] %s %s\n", metaData.getJMSProviderName(), metaData.getProviderVersion());
        Set<ActiveMQQueue> queues = connection.getDestinationSource().getQueues();
        System.out.println("[+] Queues");
        queues.forEach(q -> {
            try {
                System.out.printf("%s: %s\n", q.getQueueName(), q.getProperties());
            } catch (JMSException e) {
                e.printStackTrace();
            }
        });
    }

    private static void testPostMessageInQueues(String brokerURL) throws Exception {
        final ActiveMQConnection connection = ActiveMQConnection.makeConnection(brokerURL);
        connection.start();
        ConnectionMetaData metaData = connection.getMetaData();
        System.out.printf("[+] %s %s\n", metaData.getJMSProviderName(), metaData.getProviderVersion());
        Set<ActiveMQQueue> queues = connection.getDestinationSource().getQueues();
        System.out.println("[+] Post message in every queues");
        queues.forEach(q -> {
            String qname = "NA";
            try {
                qname = q.getQueueName();
                Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
                Destination d = s.createQueue(qname);
                MessageProducer p = s.createProducer(d);
                Message m = s.createTextMessage("TESTMESSAGE");
                p.send(m);
                System.out.printf("POST accepted in %s.\n", qname);
            } catch (JMSException e) {
                System.out.printf("POST rejected in %s.\n", qname);
            }
        });
    }

    //Playground
    public static void main(String[] args) throws Exception {
        String brokerURL = "ssl://10.10.10.10:1800";
        brokerURL="tcp://10.10.10.10:61616";
    }
}
